/*global estraverse:true*/
(function(exports, estraverse) {
  'use strict';

  var statements = {
    'BlockStatement': true,
    'BreakStatement': true,
    'ContinueStatement': true,
    'ClassBody': true,
    'ClassDeclaration': true,
    'DirectiveStatement': true,
    'DoWhileStatement': true,
    'CatchClause': true,
    'DebuggerStatement': true,
    'EmptyStatement': true,
    'ExportDeclaration': true,
    'ExpressionStatement': true,
    'ImportDeclaration': true,
    'VariableDeclarator': true,
    'VariableDeclaration': true,
    'ThrowStatement': true,
    'TryStatement': true,
    'SwitchStatement': true,
    'SwitchCase': true,
    'IfStatement': true,
    'ForStatement': true,
    'ForInStatement': true,
    'ForOfStatement': true,
    'LabeledStatement': true,
    'Program': true,
    'FunctionDeclaration': true,
    'ReturnStatement': true,
    'WhileStatement': true,
    'WithStatement': true
  };

  function isStatements(stmt) {
    return statements[stmt.type];
  }

  function hasLineTerminator(str) {
    return (/[\r\n]/g).test(str);
  }

  function attachNewlines(ast, source) {

    if (typeof ast !== 'object') {
      throw new Error('Ast must be object generated by escodegen');
    }

    if (typeof source !== 'string') {
      throw new Error('Source must be string');
    }

    function getTrailingNewlines(node) {
      var newlines = source.slice(node.range[1]).match(/^[\r\n\s]+/);
      if (!newlines) {
        return 0;
      }

      return Math.max(
        (newlines[0].match(/[\r]/g) || []).length,
        (newlines[0].match(/[\n]/g) || []).length
      );
    }

    function isMultiline(node) {
      return hasLineTerminator(source.slice(node.range[0], node.range[1]));
    }

    function enter(node, parent) {
      if (!node.range) {
        throw new Error('Node must have range property');
      }

      if (isStatements(node)) {
        node.trailingNewlines = getTrailingNewlines(node);
      }

      node.multiline = isMultiline(node);
    }

    estraverse.traverse(ast, {
      enter: enter
    });

    if (ast.comments) {
      ast.comments.forEach(function(cmtNode) {
        cmtNode.trailingNewlines = getTrailingNewlines(cmtNode);
      });
    }

    return ast;
  }

  exports.attachNewlines = attachNewlines;

})(
  typeof exports === 'object' ? exports : this,
  typeof require === 'function' ? require('estraverse-fb') : estraverse
);
